(define (brainfuck ncells input program)
  (let ((cells (make-vector ncells 0)))
    (let loop ((c 0) (i 0))
      (unless (= i (vector-length program))
        (let ((insn (vector-ref program i))
              (cell (vector-ref cells c)))
          (case insn
            ((#\>)
             (loop (+ c 1) (+ i 1)))
            ((#\<)
             (loop (- c 1) (+ i 1)))
            ((#\+)
             (vector-set! cells c (+ cell 1))
             (loop c (+ i 1)))
            ((#\-)
             (vector-set! cells c (- cell 1))
             (loop c (+ i 1)))
            ((#\.)
             (display (integer->char cell))
             (loop c (+ i 1)))
            ((#\,)
             (vector-set! cells c (input))
             (loop c (+ i 1)))
            (else
             (loop c (+ i (cond ((and (exact-integer? insn) (> insn 0))
                                 (if (= 0 cell) insn 1))
                                ((and (exact-integer? insn) (< insn 0))
                                 (if (= 0 cell) 1 insn))
                                (else (error "Huh?"))))))))))))

(define (brainfuck-compile program)
  (define (prev-opening-bracket i)
    (let loop ((i i) (nest 0))
      (case (string-ref program i)
        ((#\[) (if (<= nest 1) i (loop (- i 1) (- nest 1))))
        ((#\]) (loop (- i 1) (+ nest 1)))
        (else  (loop (- i 1) nest)))))
  (define (next-closing-bracket i)
    (let loop ((i i) (nest 0))
      (case (string-ref program i)
        ((#\[) (loop (+ i 1) (+ nest 1)))
        ((#\]) (if (<= nest 1) i (loop (+ i 1) (- nest 1))))
        (else  (loop (+ i 1) nest)))))
  (let loop ((i 0) (comp '()))
    (if (= i (string-length program))
        (list->vector (reverse comp))
        (let ((insn (string-ref program i)))
          (loop (+ i 1) (cons (case insn
                                ((#\> #\< #\+ #\- #\. #\,) insn)
                                ((#\[) (- (next-closing-bracket i) i))
                                ((#\]) (- (prev-opening-bracket i) i))
                                (else (error "Huh?")))
                              comp))))))

(brainfuck
 9000 eof-object
 (brainfuck-compile
  (string-append
   "++++++++[>++++[>++>+++>+++>+<<<<-]>+>->+>>+[<]<-]>>.>>---.++++++"
   "+..+++.>.<<-.>.+++.------.--------.>+.>++.")))
